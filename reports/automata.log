Traceback (most recent call last):
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 622, in _async_poll_for_reply
    msg = await ensure_async(self.kc.shell_channel.get_msg(timeout=new_timeout))
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 85, in ensure_async
    result = await obj
  File "/usr/local/lib/python3.7/dist-packages/jupyter_client/asynchronous/channels.py", line 48, in get_msg
    raise Empty
_queue.Empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/dist-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 841, in async_execute_cell
    exec_reply = await self.task_poll_for_reply
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 646, in _async_poll_for_reply
    await self._async_handle_timeout(timeout, cell)
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 697, in _async_handle_timeout
    "Cell execution timed out", timeout, cell
nbclient.exceptions.CellTimeoutError: A cell timed out while it was being executed, after 30 seconds.
The message was: Cell execution timed out.
Here is a preview of the cell contents:
-------------------
['neighborhood = np.array(neighborhood)', 'kernal = np.zeros(board.shape)', 'n_height, n_width = neighborhood.shape', 'b_height, b_width = board.shape', 'kernal[(b_height - n_height - 1) // 2 : (b_height + n_height) // 2, (b_width - n_width - 1) // 2 : (b_width + n_width) // 2] = neighborhood']
...
['', '    for rule_range in rule_ranges[1]:', '        new_board[np.where((board == 0) & (convolution >= rule_range[0]) & (convolution <= rule_range[1]))] = 1', '', '    board = new_board.astype(int)']
-------------------

